#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\input{../../Cours/Templates/macrosHyperlinkEnglish.tex}
\newcommand{\Dynela}{DynELA Finite Element Code}
\end_preamble
\options twoside
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding default
\fontencoding global
\font_roman "bookman" "default"
\font_sans "helvet" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 90 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 1.5cm
\bottommargin 2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 4
\tocdepth 4
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
DynELA programming language
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
startcontents[chapters]
\end_layout

\begin_layout Plain Layout


\backslash
printmyminitoc[1]
\end_layout

\end_inset


\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LETTRINE{T}
\end_layout

\end_inset


\end_layout

\end_inset

his chapter deals about the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset


\begin_inset space ~
\end_inset

programming language.
 This language is based on Python 3 and all models must be described using
 this formalism.
 Therefore, this chapter will describe step by step how to build a Finite
 Element Model for the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset

, using the Python language.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Calling the python interpreter
\end_layout

\begin_layout Standard
After the compilation phase of the code, the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset


\begin_inset space ~
\end_inset

can be launch using the following command:
\end_layout

\begin_layout Standard

\family sans
python <'model.py'>
\family default
: where model.py is the source Python 3 file defining the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset

.
 The 
\family sans
model.py 
\family default
file contains all the definitions of the Finite Element Model using a Python
 3 language and calling DynELA methods written in 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Cpp
\end_layout

\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
.
\end_layout

\begin_layout Subsection
Formalism of a DynELA python file
\end_layout

\begin_layout Standard
In order to build a Finite Element Model, it is necessary to import the
 
\family sans
dnlPython
\family default
 interpreter from the 
\family sans
.py
\family default
 script.
 Conforming to this formalism, the minimal piece of Python code to setup
 a Finite Element Model is given hereafter.
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

#!/usr/bin/env python3
\end_layout

\begin_layout Plain Layout

import dnlPython as dnl # Imports the dnlPython library as dnl
\end_layout

\begin_layout Plain Layout

model = dnl.DynELA()    # Creates the main Object
\end_layout

\begin_layout Plain Layout

...
                     # Set of instructions to build the FE model
\end_layout

\begin_layout Plain Layout

                        # and conforming to the DynELA language and Python
 3
\end_layout

\begin_layout Plain Layout

model.solve()           # Runs the solver
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the preceding piece of code, line 2 is used to load into memory the module
 dnlPython containing the interface to all 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Cpp
\end_layout

\end_inset


\begin_inset space ~
\end_inset

methods of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset


\begin_inset space ~
\end_inset

based on the use of the SWIG Python interface.
 Therefore, all public methods of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset


\begin_inset space ~
\end_inset

written in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Cpp
\end_layout

\end_inset


\begin_inset space ~
\end_inset

can be called from the Python script to build the FEM model, lanch teh solver,
 produce output results...
 
\end_layout

\begin_layout Standard
In the minimal proposed example, line 3 is used to create an object of type
 
\family sans
DynELA
\family default
 (the higher object type in the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset


\begin_inset space ~
\end_inset

library) and instantiate it as the 
\family sans
model
\family default
 object
\begin_inset Foot
status open

\begin_layout Plain Layout
For the rest of this chapter, we will assume that the name of the instanciated
 
\family sans
DynELA
\family default
 object is 
\family sans
model.
\end_layout

\end_inset

, while line 6, the solver of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset


\begin_inset space ~
\end_inset

library is called to solve the problem and produce the results.
\end_layout

\begin_layout Standard
As the interpretor of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset


\begin_inset space ~
\end_inset

is based on Python 3 language, all kind of instructions valid in Python
 3 can be used along with the specific DynELA instructions.
\end_layout

\begin_layout Section
The Kernel library
\end_layout

\begin_layout Standard
#include "LogFile.h"
\end_layout

\begin_layout Standard
#include "MacAddress.h"
\end_layout

\begin_layout Standard
#include "Settings.h"
\end_layout

\begin_layout Standard
#include "String.h"
\end_layout

\begin_layout Standard
#include "System.h"
\end_layout

\begin_layout Standard
#include "Timer.h"
\end_layout

\begin_layout Standard
#include "Field.h"
\end_layout

\begin_layout Section
The Maths library
\end_layout

\begin_layout Standard
#include "DiscreteFunction.h"
\end_layout

\begin_layout Standard
#include "DiscreteFunctionSet.h"
\end_layout

\begin_layout Standard
#include "Function.h"
\end_layout

\begin_layout Standard
#include "Matrices.h"
\end_layout

\begin_layout Standard
#include "Matrix.h"
\end_layout

\begin_layout Standard
#include "MatrixDiag.h"
\end_layout

\begin_layout Standard
#include "PolynomialFunction.h"
\end_layout

\begin_layout Standard
#include "RampFunction.h"
\end_layout

\begin_layout Standard
#include "SinusFunction.h"
\end_layout

\begin_layout Standard
#include "SymTensor2.h"
\end_layout

\begin_layout Standard
#include "Tensor2.h"
\end_layout

\begin_layout Standard
#include "Tensor3.h"
\end_layout

\begin_layout Standard
#include "Tensor4.h"
\end_layout

\begin_layout Standard
#include "Vec3D.h"
\end_layout

\begin_layout Standard
#include "Vector.h"
\end_layout

\begin_layout Standard
#include "ColorMap.h"
\end_layout

\begin_layout Section
Nodes and elements
\end_layout

\begin_layout Standard
All Finite Element Models involves nodes and elements.
 The very first part of the model is therefore to create the nodes and the
 elements of the structure to setup a FE Model.
 The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset


\begin_inset space ~
\end_inset

library doesn't include any meshing procedure yet, therefore, it is mandatory
 to create all elements and all nodes by hand or using Python loops in case
 it can be used.
 Another way is to use an external meshing program and convert the output
 of this program to produce the ad-hoc lines of Python to describe the elements
 and the nodes of the model.
 This has been used many times by the author, and the Abaqus Finite Element
 code, is an efficient way to create the mesh using the .inp text file generated
 by the CAE Abaqus program.
\end_layout

\begin_layout Subsection
Definition of the Model
\end_layout

\begin_layout Subsection
Definition of the nodes
\end_layout

\begin_layout Standard
In the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset

, creation of nodes is done by calling the 
\family sans
DynELA.createNode()
\family default
 method.
 Therefore, a node is created by calling the 
\family sans
createNode()
\family default
 method and giving the new node number and the 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

 and 
\begin_inset Formula $z$
\end_inset

 coordinates of the new node as presented just below.
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

model.createNode(1, 0.0, 0.0, 0.0)  # Node 1 [0.0, 0.0, 0.0]
\end_layout

\begin_layout Plain Layout

model.createNode(2, 1.0, 2.0, -1.0) # Node 2 [1.0, 2.0, -1.0]
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A check of the total number of nodes of the structure can be done using
 the 
\family sans
DynELA.getNodesNumber()
\family default
 method that returns the total number of nodes created.
\end_layout

\begin_layout Subsection
Definitions of the elements
\end_layout

\begin_layout Standard
In the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset

, creation of elements is done by calling the 
\family sans
DynELA.createElement()
\family default
 method.
 An element is created by calling the 
\family sans
createNode()
\family default
 method and giving the new element number and the list of nodes defining
 the element shape separated by comas and ordered tanks to the element definitio
n as presented just below.
 Before creating the very first element of the structure, it is necessary
 to define the element shape using the 
\family sans
DynELA.setDefaultElement()
\family default
 method as presented hereafter.
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

model.setDefaultElement(dnl.Element.ElQua4N2D) # Defines the default element
\end_layout

\begin_layout Plain Layout

model.createElement(1, 1, 2, 3, 4)             # Creates element 1 with nodes
 1,2,3,4
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following elements are available in the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
ElQua4n2D : 4 nodes bi-linear 2D quadrilateral element.
\end_layout

\begin_layout Description
ElQua4NAx : 4 nodes bi-linear axisymmetric quadrilateral element.
\end_layout

\begin_layout Description
ElTri3N2D : 3 nodes 2D triangular element.
\end_layout

\begin_layout Description
ElHex8N3D : 8 nodes 3D hexahedral element.
\end_layout

\begin_layout Description
ElTet4N3D : 4 nodes 3D tetrahedral element.
\end_layout

\begin_layout Description
ElTet10N3D : 10 nodes 3D tetrahedral element.
\end_layout

\begin_layout Standard
A check of the total number of elements of the structure can be done using
 the 
\family sans
DynELA.getElementsNumber()
\family default
 method that returns the total number of elements created.
\end_layout

\begin_layout Subsection
Nodes sets
\end_layout

\begin_layout Standard
Manipulation of nodes, application of boundaries conditions, etc...
 is done through the definition of nodes sets.
 Such nodes sets are used to group nodes under a 
\family sans
NodeSet
\family default
 object for further use.
 A 
\family sans
NodeSet
\family default
 object contains a reference to a name (a string use to identify the object),
 and a list of nodes.
 Creation of a 
\family sans
NodeSet
\family default
 is done using the 
\family sans
DynELA.NodeSet()
\family default
 method that returns an new 
\family sans
NodeSet
\family default
 instance.
 The 
\family sans
NodeSet
\family default
 can be named during the creation by specifying its name as a string.
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

nset = dnl.NodeSet("NS_All")
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the 
\family sans
NodeSet
\family default
 has been created, one can now define the list of nodes constituting the
 
\family sans
NodeSet
\family default
 with the generic 
\family sans
DynELA.add()
\family default
 method with the following formalism 
\family sans
add(nodeset, start, end, increment)
\family default
.
 Hereafter are some self explaining examples to illustrate this process.
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

nset = dnl.NodeSet("NS_All")
\end_layout

\begin_layout Plain Layout

model.add(nset, 2)       # Add node number 2 to node set
\end_layout

\begin_layout Plain Layout

model.add(nset, 1, 4)    # Add nodes number 1 to 4 to node set
\end_layout

\begin_layout Plain Layout

model.add(nset, 1, 4, 2) # Add nodes number 1 and 3 to node set
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Element sets
\end_layout

\begin_layout Standard
Application of materials, application of boundaries conditions, etc...
 is done through the definition of elements sets.
 Such elements sets are used to group elements under an 
\family sans
ElementSet
\family default
 object for further use.
 An 
\family sans
ElementSet
\family default
 object contains a reference to a name (a string use to identify the object),
 and a list of elements.
 Creation of an 
\family sans
ElementSet
\family default
 is done using the 
\family sans
DynELA.ElementSet()
\family default
 method that returns an new 
\family sans
ElementSet
\family default
 instance.
 The 
\family sans
ElementSet
\family default
 can be named during the creation by specifying its name as a string.
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

eset = dnl.ElementSet("ES_All")
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the 
\family sans
ElementSet
\family default
 has been created, one can now define the list of nodes constituting the
 
\family sans
ElementSet
\family default
 with the generic 
\family sans
DynELA.add()
\family default
 method with the following formalism 
\family sans
add(elementset, start, end, increment)
\family default
.
 Hereafter are some self explaining examples to illustrate this process.
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

eset = dnl.ElementSet("ES_All")
\end_layout

\begin_layout Plain Layout

model.add(eset, 2)       # Add elemeny number 2 to element set
\end_layout

\begin_layout Plain Layout

model.add(eset, 1, 4)    # Add elements number 1 to 4 to element set
\end_layout

\begin_layout Plain Layout

model.add(eset, 1, 4, 2) # Add elements number 1 and 3 to element set
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Coordinates transformations
\end_layout

\begin_layout Standard
When the mesh has been created, it is always possible to modify the geometry
 of the structure by applying some geometrical operations such as translations,
 rotations and change of scale.
 Those operations apply on a 
\family sans
NodeSet
\family default
.
\end_layout

\begin_layout Subsection
Translations
\end_layout

\begin_layout Standard
One can define a translation of the whole model or a part of the model by
 defining a translation vector (an instance of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\family sans
Vec3D
\family default
) and apply this translation to the whole structure (without specifying
 the 
\family sans
NodeSet
\family default
) or a 
\family sans
NodeSet
\family default
 using the 
\family sans
DynELA.translate()
\family default
 method with the following syntax.
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

vector = dnl.Vec3D(1.0, 0.0, 0.0) # Defines the translation vector
\end_layout

\begin_layout Plain Layout

model.translate(vector)           # Translates the whole model along [1.0,
 0.0, 0.0]
\end_layout

\begin_layout Plain Layout

model.translate(vector, nset)     # Translates the NodeSet ns along [1.0,
 0.0, 0.0]
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Rotations
\end_layout

\begin_layout Standard
One can define a rotation of the whole model or a part of the model by defining
 a rotation vector (global axes 
\begin_inset Formula $\overrightarrow{\ensuremath{x}}$
\end_inset

, 
\begin_inset Formula $\overrightarrow{y}$
\end_inset

, 
\begin_inset Formula $\overrightarrow{\ensuremath{z}}$
\end_inset

 or an instance of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\family sans
Vec3D
\family default
) and an angle 
\begin_inset Formula $\alpha$
\end_inset

 and apply this rotation to the whole structure (without specifying the
 
\family sans
NodeSet
\family default
) or a 
\family sans
NodeSet
\family default
 using the 
\family sans
DynELA.rotate()
\family default
 method with the following syntax.
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

axis = dnl.Vec3D(1.0, 1.0, 1.0) # Defines the axis of rotation
\end_layout

\begin_layout Plain Layout

model.rotate('X', angle)        # Rotation of the whole structure around
 X
\end_layout

\begin_layout Plain Layout

model.rotate('X', angle, ns)    # Rotation of NodeSet ns around X
\end_layout

\begin_layout Plain Layout

model.rotate(axis, angle)       # Rotation of the whole structure around
 axis
\end_layout

\begin_layout Plain Layout

model.rotate(axis, angle, ns)   # Rotation of NodeSet ns around axis
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Scaling
\end_layout

\begin_layout Standard
One can define a scaling of the whole model or a part of the model by defining
 a scale factor or a scale vector (an instance of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Dynela
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\family sans
Vec3D
\family default
) and apply this scaling operation to the whole structure (without specifying
 the 
\family sans
NodeSet
\family default
) or a 
\family sans
NodeSet
\family default
 using the 
\family sans
DynELA.scale()
\family default
 method with the following syntaxes.
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

vector = dnl.Vec3D(2.0, 1.0, 1.0) # Defines the scale vector
\end_layout

\begin_layout Plain Layout

model.scale(value)      # Scales the whole structure by factor value
\end_layout

\begin_layout Plain Layout

model.scale(value, ns)  # Scales the NodeSet ns by factor value
\end_layout

\begin_layout Plain Layout

model.scale(vector)     # Scales the whole structure by a factor of 2.0 on
 x
\end_layout

\begin_layout Plain Layout

model.scale(vector, ns) # Scales the NodeSet ns by a factor of 2.0 on x
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Materials
\end_layout

\begin_layout Subsection
General properties
\end_layout

\begin_layout Standard
General properties of materials in 
\begin_inset ERT
status open

\begin_layout Plain Layout

Dynela
\end_layout

\end_inset


\begin_inset space ~
\end_inset

concerns the general constants such as Young's modulus, Poisson's ratio,
 density,...
 The complete list of parameters is given hereafter.
\end_layout

\begin_layout Description
youngModulus : The young modulus 
\begin_inset Formula $E$
\end_inset

 of the material to define the elastic behaviour of the material.
\end_layout

\begin_layout Description
poissonRatio : The Poisson ratio 
\begin_inset Formula $\nu$
\end_inset

 of the material to define the elastic behaviour of the material.
\end_layout

\begin_layout Description
density : The density 
\begin_inset Formula $\rho$
\end_inset

 of the material.
\end_layout

\begin_layout Description
heatCapacity : The heat capacity 
\begin_inset Formula $C_{p}$
\end_inset

 of the material.
\end_layout

\begin_layout Description
taylorQuinney : The Taylor-Quinney coefficient 
\begin_inset Formula $\eta$
\end_inset

 defining the amount of plastic energy converted into heat during a plastic
 transformation of the material.
\end_layout

\begin_layout Description
initialTemperature : The initial temperature 
\begin_inset Formula $T_{0}$
\end_inset

 of the material at the beginning of the computation.
\end_layout

\begin_layout Standard
After creating an instance of the object 
\family sans
dnl.Material
\family default
, on can apply the prescribed values to all those parameters using the following
 syntax.
 
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

# Creates the material
\end_layout

\begin_layout Plain Layout

steel = dnl.Material("Steel")
\end_layout

\begin_layout Plain Layout

# Apply all parameters
\end_layout

\begin_layout Plain Layout

steel.youngModulus = 206e9
\end_layout

\begin_layout Plain Layout

steel.poissonRatio = 0.3
\end_layout

\begin_layout Plain Layout

steel.density = 7830
\end_layout

\begin_layout Plain Layout

steel.heatCapacity = 46
\end_layout

\begin_layout Plain Layout

steel.taylorQuinney = 0.9
\end_layout

\begin_layout Plain Layout

steel.initialTemperature = 25
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
And, the material can be affected to the elements of the model by the 
\family sans
DynELA.add()
\family default
 method as proposed hereafter.
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

# Creates the material
\end_layout

\begin_layout Plain Layout

steel = dnl.Material("Steel")
\end_layout

\begin_layout Plain Layout

# Apply all parameters
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

# Affect the material to the element set
\end_layout

\begin_layout Plain Layout

model.add(steel, eset)
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Johnson-Cook constitutive law
\end_layout

\begin_layout Standard
The Johnson-Cook constitutive law is an hardening law defining the yield
 stress 
\begin_inset Formula $\sigma^{y}(\overline{\varepsilon}^{p},\stackrel{\bullet}{\overline{\varepsilon}^{p}},T)$
\end_inset

 by the following equation:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\sigma^{y}=\left(A+B\overline{\varepsilon}^{p^{n}}\right)\left[1+C\ln\left(\frac{\stackrel{\bullet}{\overline{\varepsilon}^{p}}}{\stackrel{\bullet}{\overline{\varepsilon}_{0}}}\right)\right]\left[1-\left(\frac{T-T_{0}}{T_{m}-T_{0}}\right)^{m}\right]
\end{equation}

\end_inset

where 
\begin_inset Formula $\stackrel{\bullet}{\overline{\varepsilon}_{0}}$
\end_inset

 is the reference strain rate, 
\begin_inset Formula $T_{0}$
\end_inset

 and 
\begin_inset Formula $T_{m}$
\end_inset

 are the reference temperature and the melting temperature of the material
 respectively and 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

, 
\begin_inset Formula $n$
\end_inset

 and 
\begin_inset Formula $m$
\end_inset

 are the five constitutive flow law parameters.
 Therefore, this kind of hardening law can be defined by using the following
 piece of code:
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

hardLaw = dnl.JohnsonCookLaw()                       # Hardening law
\end_layout

\begin_layout Plain Layout

hardLaw.setParameters(A, B, C, n, m, depsp0, Tm, T0) # Parameters of the
 law in order
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once the hardening law has been created, one have to link this hardening
 law to a material already defined using the following piece of code:
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

# Creates the material
\end_layout

\begin_layout Plain Layout

steel = dnl.Material("Steel")
\end_layout

\begin_layout Plain Layout

# Creates the hardening law
\end_layout

\begin_layout Plain Layout

hardLaw = dnl.JohnsonCookLaw()
\end_layout

\begin_layout Plain Layout

# Attach hardening law to material
\end_layout

\begin_layout Plain Layout

steel.setHardeningLaw(hardLaw)
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Boundaries conditions
\end_layout

\begin_layout Subsection
Restrain boundary condition
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

# Declaration of a boundary condition for top part
\end_layout

\begin_layout Plain Layout

topBC = dnl.BoundaryRestrain('BC_top')
\end_layout

\begin_layout Plain Layout

topBC.setValue(0, 1, 1)
\end_layout

\begin_layout Plain Layout

model.attachConstantBC(topBC, topNS)
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Amplitude
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

# Declaration of a ramp function to apply the load
\end_layout

\begin_layout Plain Layout

ramp = dnl.RampFunction("constantFunction")
\end_layout

\begin_layout Plain Layout

ramp.set(dnl.RampFunction.Constant, 0, stopTime)
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Constant speed
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

# Declaration of a boundary condition for top part
\end_layout

\begin_layout Plain Layout

topSpeed = dnl.BoundarySpeed()
\end_layout

\begin_layout Plain Layout

topSpeed.setValue(displacement, 0, 0)
\end_layout

\begin_layout Plain Layout

topSpeed.setFunction(ramp)
\end_layout

\begin_layout Plain Layout

model.attachConstantBC(topSpeed, topNS)
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Initial speed
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

# Declaration of a ramp function to apply the load
\end_layout

\begin_layout Plain Layout

ramp = dnl.RampFunction("constantFunction")
\end_layout

\begin_layout Plain Layout

ramp.set(dnl.RampFunction.Constant, 0, stopTime)
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Fields
\end_layout

\begin_layout Subsection
Nodal fields
\end_layout

\begin_layout Standard
Nodal fields are defined at nodes and cover types defined in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Programming!NodalFields"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Concerning those fields, some of them are directely defined at nodes, some
 other are extrapolated from integration points and transfered to nodes
 as reported in column 
\family sans
loc
\family default
 of table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Programming!NodalFields"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Concerning types, 
\family sans
scalars
\family default
, 
\family sans
vec3D
\family default
 and 
\family sans
tensors
\family default
 are available.
 Depending in the type of data, different methods can be used to acces those
 data:
\end_layout

\begin_layout Description
scalar : Direct access to the value as it is unique.
\end_layout

\begin_layout Description
vec3D : Access to all 
\begin_inset Formula $3$
\end_inset

 components of a vec3D using 
\family sans
nameX
\family default
, 
\family sans
nameY
\family default
, 
\family sans
nameZ
\family default
 or the norm of the vec3D using 
\family sans
name
\family default
.
\end_layout

\begin_layout Description
tensor : Access to all 
\begin_inset Formula $9$
\end_inset

 components of a tensor using 
\family sans
nameXX
\family default
, 
\family sans
nameXY
\family default
,..., 
\family sans
nameZZ
\family default
 or the norm of the tensor using 
\family sans
name
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\backslash
begin{tcolorbox}[width=.75
\backslash
textwidth,myTab,tabularx={c|c|c|c|C}]
\end_layout

\begin_layout Plain Layout

name & type & label & loc & description 
\backslash

\backslash
 
\backslash
hline
\backslash
hline
\end_layout

\begin_layout Plain Layout

density & scalar & & IntPt &
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

displacementIncrement & vec3D & & node & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

displacement & vec3D & & node & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

energyIncrement & scalar & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

energy & scalar & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

gammaCumulate & scalar & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

gamma & scalar & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

internalEnergy & scalar & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

mass & scalar & & node & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

nodeCoordinate & vec3D & & node & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

normal & vec3D & & node & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

PlasticStrainInc & tensor & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

plasticStrainRate & scalar & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

plasticStrain & scalar & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

PlasticStrain & tensor & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

pressure & scalar & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

speedIncrement & vec3D & & node & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

speed & vec3D & & node & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

StrainInc & tensor & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

Strain & tensor & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

Stress & tensor & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

temperature & scalar & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

vonMises & scalar & & IntPt & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

yieldStress & scalar & & IntPt & 
\end_layout

\begin_layout Plain Layout


\backslash
end{tcolorbox}
\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Nodal fields
\begin_inset CommandInset label
LatexCommand label
name "tab:Programming!NodalFields"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Element fields
\end_layout

\begin_layout Standard
Element fields are defined at integration points and cover types defined
 in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Programming!ElementlFields"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Concerning types, 
\family sans
scalars
\family default
, 
\family sans
vec3D
\family default
 and 
\family sans
tensors
\family default
 are available.
 Depending in the type of data, different methods can be used to acces those
 data:
\end_layout

\begin_layout Description
scalar : Direct access to the value as it is unique.
\end_layout

\begin_layout Description
vec3D : Access to all 
\begin_inset Formula $3$
\end_inset

 components of a vec3D using 
\family sans
nameX
\family default
, 
\family sans
nameY
\family default
, 
\family sans
nameZ
\family default
 or the norm of the vec3D using 
\family sans
name
\family default
.
\end_layout

\begin_layout Description
tensor : Access to all 
\begin_inset Formula $9$
\end_inset

 components of a tensor using 
\family sans
nameXX
\family default
, 
\family sans
nameXY
\family default
,..., 
\family sans
nameZZ
\family default
 or the norm of the tensor using 
\family sans
name
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\backslash
begin{tcolorbox}[width=.75
\backslash
textwidth,myTab,tabularx={c|c|c|C}]
\end_layout

\begin_layout Plain Layout

name & type & label & description 
\backslash

\backslash
 
\backslash
hline
\backslash
hline
\end_layout

\begin_layout Plain Layout

density & scalar & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

gammaCumulate & scalar  & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

gamma & scalar & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

internalEnergy & scalar & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

plasticStrainRate & scalar & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

plasticStrain & scalar & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

PlasticStrain & tensor & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

PlaticStrainInc & tensor & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

pressure & scalar & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

StrainInc & tensor & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

Strain & tensor & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

Stress & tensor & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

temperature & scalar & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

vonMises & scalar & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

yieldStress & scalar & &
\end_layout

\begin_layout Plain Layout


\backslash
end{tcolorbox}
\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Element fields
\begin_inset CommandInset label
LatexCommand label
name "tab:Programming!ElementlFields"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Global fields
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\backslash
begin{tcolorbox}[width=.75
\backslash
textwidth,myTab,tabularx={c|c|c|C}]
\end_layout

\begin_layout Plain Layout

name & type & label & description 
\backslash

\backslash
 
\backslash
hline
\backslash
hline
\end_layout

\begin_layout Plain Layout

kineticEnergy & scalar & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

realTimeStep & scalar & & 
\backslash

\backslash
 
\backslash
hline
\end_layout

\begin_layout Plain Layout

timeStep & scalar & & 
\end_layout

\begin_layout Plain Layout


\backslash
end{tcolorbox}
\backslash
end{center}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Global fields
\begin_inset CommandInset label
LatexCommand label
name "tab:Programming!GlobalFields"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Data Output during computation
\end_layout

\begin_layout Subsection
Database files
\end_layout

\begin_layout Subsection
VTK Data files
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

model.setSaveTimes(0, stopTime, stopTime/nbreSaves)
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
History files
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

dtHist = dnl.HistoryFile("dtHistory")
\end_layout

\begin_layout Plain Layout

dtHist.setFileName(dnl.String("dt.plot"))
\end_layout

\begin_layout Plain Layout

dtHist.add(dnl.Field.timeStep)
\end_layout

\begin_layout Plain Layout

dtHist.setSaveTime(stopTime/nbrePoints)
\end_layout

\begin_layout Plain Layout

model.add(dtHist)
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Solvers
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

# Declaration of the explicit solver
\end_layout

\begin_layout Plain Layout

solver = dnl.Explicit("Solver")
\end_layout

\begin_layout Plain Layout

solver.setTimes(0, stopTime)
\end_layout

\begin_layout Plain Layout

solver.setTimeStepSafetyFactor(1.0)
\end_layout

\begin_layout Plain Layout

model.add(solver)
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Parallel solver
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

# Parallel solver with two cores
\end_layout

\begin_layout Plain Layout

model.parallel.setCores(2)
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Solving procedure
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

# Run the main solver
\end_layout

\begin_layout Plain Layout

model.solve()
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Vectorial contourplots
\end_layout

\begin_layout Subsection
SVG datafile
\end_layout

\begin_layout Section
Utilities
\end_layout

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{PythonListing}
\end_layout

\begin_layout Plain Layout

# Plot the results as curves
\end_layout

\begin_layout Plain Layout

import dnlCurves as cu
\end_layout

\begin_layout Plain Layout

curves = cu.Curves()
\end_layout

\begin_layout Plain Layout

curves.plotFile('Curves.ex')
\end_layout

\begin_layout Plain Layout


\backslash
end{PythonListing}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
